[
  {
    "id": "1756548701542",
    "name": "Flappy Google",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flappy Google</title>\n    <style>\n        :root {\n            --bg-color: #f0f0f0;\n            --game-bg-color: #70c5ce;\n            --pipe-color: #74bf2e;\n            --pipe-border-color: #4b8313;\n            --text-color: #ffffff;\n            --shadow-color: #0000004d;\n            --font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n        }\n\n        body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: var(--bg-color);\n            font-family: var(--font-family);\n            color: var(--text-color);\n        }\n\n        #game-container {\n            position: relative;\n            width: 400px;\n            height: 600px;\n            overflow: hidden;\n            border-radius: 10px;\n            box-shadow: 0 10px 20px var(--shadow-color);\n        }\n\n        #gameCanvas {\n            background-color: var(--game-bg-color);\n            display: block;\n        }\n\n        .overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            background-color: rgba(0, 0, 0, 0.4);\n            backdrop-filter: blur(2px);\n        }\n\n        .overlay h1 {\n            font-size: 50px;\n            margin-bottom: 10px;\n            text-shadow: 3px 3px 5px var(--shadow-color);\n        }\n\n        .overlay p {\n            font-size: 20px;\n            margin: 5px 0;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        #restart-button {\n            margin-top: 20px;\n            padding: 15px 30px;\n            font-size: 20px;\n            font-weight: bold;\n            color: #4285F4;\n            background-color: #fff;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: transform 0.2s, box-shadow 0.2s;\n            box-shadow: 0 4px 6px var(--shadow-color);\n        }\n\n        #restart-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 10px var(--shadow-color);\n        }\n        \n        #score-display {\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 50px;\n            font-weight: bold;\n            text-shadow: 3px 3px 5px rgba(0,0,0,0.5);\n            z-index: 10;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"game-container\">\n        <canvas id=\"gameCanvas\" width=\"400\" height=\"600\"></canvas>\n        <div id=\"score-display\">0</div>\n        \n        <div id=\"start-screen\" class=\"overlay\">\n            <h1>Flappy Google</h1>\n            <p>Click, tap, or press Space to start</p>\n            <p>Avoid the pipes!</p>\n        </div>\n\n        <div id=\"game-over-screen\" class=\"overlay\" style=\"display: none;\">\n            <h1>Game Over</h1>\n            <p>Score: <span id=\"final-score\">0</span></p>\n            <p>High Score: <span id=\"high-score\">0</span></p>\n            <button id=\"restart-button\">Restart</button>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- DOM Elements ---\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            const scoreDisplay = document.getElementById('score-display');\n            const startScreen = document.getElementById('start-screen');\n            const gameOverScreen = document.getElementById('game-over-screen');\n            const finalScoreEl = document.getElementById('final-score');\n            const highScoreEl = document.getElementById('high-score');\n            const restartButton = document.getElementById('restart-button');\n\n            // --- Game Constants ---\n            const CANVAS_WIDTH = canvas.width;\n            const CANVAS_HEIGHT = canvas.height;\n\n            // --- Game State ---\n            let gameState = 'READY'; // READY, PLAYING, GAME_OVER\n            let score = 0;\n            let highScore = 0;\n            let frames = 0;\n\n            // --- Google Logo SVG ---\n            // This SVG is embedded as a Base64 string to keep everything in one file.\n            const GOOGLE_LOGO_SVG = `\n                <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n                </svg>`;\n            const birdImage = new Image();\n            birdImage.src = 'data:image/svg+xml;base64,' + btoa(GOOGLE_LOGO_SVG);\n\n            // --- Bird Object ---\n            const bird = {\n                x: 60,\n                y: CANVAS_HEIGHT / 2,\n                width: 45,\n                height: 45,\n                gravity: 0.25, // MODIFIED: Was 0.35. Reduced gravity for a slower fall.\n                lift: -6.5,    // MODIFIED: Was -7. Gentler flap for more control.\n                velocity: 0,\n\n                draw: function() {\n                    ctx.save();\n                    ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\n                    // Rotate based on velocity for a more dynamic feel\n                    const rotation = Math.min(Math.max(-0.5, this.velocity / 15), 0.9);\n                    ctx.rotate(rotation);\n                    ctx.drawImage(birdImage, -this.width / 2, -this.height / 2, this.width, this.height);\n                    ctx.restore();\n                },\n\n                update: function() {\n                    this.velocity += this.gravity;\n                    this.y += this.velocity;\n\n                    // Prevent bird from going off the top of the screen\n                    if (this.y < 0) {\n                        this.y = 0;\n                        this.velocity = 0;\n                    }\n                },\n\n                flap: function() {\n                    this.velocity = this.lift;\n                },\n\n                reset: function() {\n                    this.y = CANVAS_HEIGHT / 2;\n                    this.velocity = 0;\n                }\n            };\n\n            // --- Pipes Object ---\n            const pipes = {\n                array: [],\n                width: 70,\n                gap: 200,             // MODIFIED: Was 160. Wider gap is easier to navigate.\n                speed: 2,             // MODIFIED: Was 3. Slower pipes give more reaction time.\n                spawnInterval: 120,   // MODIFIED: Was 90. More horizontal space between pipes.\n\n                draw: function() {\n                    this.array.forEach(pipe => {\n                        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-color').trim();\n                        ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-border-color').trim();\n                        ctx.lineWidth = 4;\n\n                        // Top pipe\n                        ctx.fillRect(pipe.x, 0, this.width, pipe.y);\n                        ctx.strokeRect(pipe.x, 0, this.width, pipe.y);\n\n                        // Bottom pipe\n                        const bottomPipeY = pipe.y + this.gap;\n                        const bottomPipeHeight = CANVAS_HEIGHT - bottomPipeY;\n                        ctx.fillRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                        ctx.strokeRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                    });\n                },\n\n                update: function() {\n                    // Spawn new pipes\n                    if (frames % this.spawnInterval === 0) {\n                        const minHeight = 80;\n                        const maxHeight = CANVAS_HEIGHT - this.gap - minHeight;\n                        const randomY = Math.floor(Math.random() * (maxHeight - minHeight + 1) + minHeight);\n                        this.array.push({ x: CANVAS_WIDTH, y: randomY, passed: false });\n                    }\n\n                    // Move and manage pipes\n                    this.array.forEach(pipe => {\n                        pipe.x -= this.speed;\n\n                        // Check for score\n                        if (!pipe.passed && pipe.x + this.width < bird.x) {\n                            pipe.passed = true;\n                            score++;\n                            updateScoreDisplay();\n                        }\n                    });\n\n                    // Remove off-screen pipes\n                    this.array = this.array.filter(pipe => pipe.x + this.width > 0);\n                },\n\n                reset: function() {\n                    this.array = [];\n                }\n            };\n\n            // --- Collision Detection ---\n            function checkCollisions() {\n                // Ground collision\n                if (bird.y + bird.height >= CANVAS_HEIGHT) {\n                    return true;\n                }\n                \n                // Pipe collision\n                for (let i = 0; i < pipes.array.length; i++) {\n                    const p = pipes.array[i];\n                    if (\n                        bird.x < p.x + pipes.width &&\n                        bird.x + bird.width > p.x &&\n                        (bird.y < p.y || bird.y + bird.height > p.y + pipes.gap)\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            // --- UI and State Management ---\n            function updateScoreDisplay() {\n                scoreDisplay.textContent = score;\n            }\n\n            function loadHighScore() {\n                const storedHighScore = localStorage.getItem('flappyGoogleHighScore');\n                highScore = storedHighScore ? parseInt(storedHighScore, 10) : 0;\n            }\n\n            function saveHighScore() {\n                if (score > highScore) {\n                    highScore = score;\n                    localStorage.setItem('flappyGoogleHighScore', highScore);\n                }\n            }\n\n            function handleInput() {\n                switch (gameState) {\n                    case 'READY':\n                        startGame();\n                        break;\n                    case 'PLAYING':\n                        bird.flap();\n                        break;\n                }\n            }\n            \n            function startGame() {\n                gameState = 'PLAYING';\n                startScreen.style.display = 'none';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                bird.flap();\n            }\n\n            function triggerGameOver() {\n                if (gameState === 'GAME_OVER') return;\n                gameState = 'GAME_OVER';\n                saveHighScore();\n                finalScoreEl.textContent = score;\n                highScoreEl.textContent = highScore;\n                gameOverScreen.style.display = 'flex';\n                scoreDisplay.style.display = 'none';\n            }\n\n            function resetGame() {\n                bird.reset();\n                pipes.reset();\n                score = 0;\n                frames = 0;\n                updateScoreDisplay();\n                gameState = 'READY';\n                startScreen.style.display = 'flex';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                scoreDisplay.textContent = '0';\n            }\n            \n            // --- Game Loop ---\n            function update() {\n                if (gameState !== 'PLAYING') return;\n                \n                bird.update();\n                pipes.update();\n                \n                if (checkCollisions()) {\n                    triggerGameOver();\n                }\n\n                frames++;\n            }\n\n            function draw() {\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                pipes.draw();\n                bird.draw();\n            }\n\n            function gameLoop() {\n                update();\n                draw();\n                requestAnimationFrame(gameLoop);\n            }\n\n            // --- Event Listeners ---\n            document.addEventListener('keydown', (e) => {\n                if (e.code === 'Space') {\n                    handleInput();\n                }\n            });\n            document.addEventListener('mousedown', handleInput);\n            document.addEventListener('touchstart', handleInput);\n            restartButton.addEventListener('click', (e) => {\n                e.stopPropagation(); // Prevent the click from triggering a flap\n                resetGame();\n            });\n\n            // --- Initialization ---\n            function init() {\n                loadHighScore();\n                resetGame();\n                gameLoop();\n            }\n\n            init();\n        });\n    </script>\n\n</body>\n</html>"
  },
  {
    "id": "1756631011217",
    "name": "Flappy Google cheater edition",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flappy Google</title>\n    <style>\n        :root {\n            --bg-color: #f0f0f0;\n            --game-bg-color: #70c5ce;\n            --pipe-color: #74bf2e;\n            --pipe-border-color: #4b8313;\n            --text-color: #ffffff;\n            --shadow-color: #0000004d;\n            --font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n        }\n\n        body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: var(--bg-color);\n            font-family: var(--font-family);\n            color: var(--text-color);\n        }\n\n        #game-container {\n            position: relative;\n            width: 400px;\n            height: 600px;\n            overflow: hidden;\n            border-radius: 10px;\n            box-shadow: 0 10px 20px var(--shadow-color);\n        }\n\n        #gameCanvas {\n            background-color: var(--game-bg-color);\n            display: block;\n        }\n\n        .overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            background-color: rgba(0, 0, 0, 0.4);\n            backdrop-filter: blur(2px);\n        }\n\n        .overlay h1 {\n            font-size: 50px;\n            margin-bottom: 10px;\n            text-shadow: 3px 3px 5px var(--shadow-color);\n        }\n\n        .overlay p {\n            font-size: 20px;\n            margin: 5px 0;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        #restart-button {\n            margin-top: 20px;\n            padding: 15px 30px;\n            font-size: 20px;\n            font-weight: bold;\n            color: #4285F4;\n            background-color: #fff;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            transition: transform 0.2s, box-shadow 0.2s;\n            box-shadow: 0 4px 6px var(--shadow-color);\n        }\n\n        #restart-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 10px var(--shadow-color);\n        }\n        \n        #score-display {\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 50px;\n            font-weight: bold;\n            text-shadow: 3px 3px 5px rgba(0,0,0,0.5);\n            z-index: 10;\n        }\n\n        /* --- Cheat Mode Styles --- */\n        .cheat-toggle-container {\n            margin-top: 25px;\n            display: flex;\n            align-items: center;\n            gap: 15px;\n            font-size: 16px;\n            text-shadow: 2px 2px 3px var(--shadow-color);\n        }\n\n        .cheat-toggle {\n            width: 50px;\n            height: 26px;\n            background-color: #ccc;\n            border-radius: 13px;\n            cursor: pointer;\n            position: relative;\n            transition: background-color 0.3s;\n            flex-shrink: 0;\n        }\n\n        .cheat-toggle.active {\n            background-color: #34A853; /* Google Green */\n        }\n\n        .cheat-toggle-knob {\n            width: 22px;\n            height: 22px;\n            background-color: white;\n            border-radius: 50%;\n            position: absolute;\n            top: 2px;\n            left: 2px;\n            transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n        }\n\n        .cheat-toggle.active .cheat-toggle-knob {\n            transform: translateX(24px);\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"game-container\">\n        <canvas id=\"gameCanvas\" width=\"400\" height=\"600\"></canvas>\n        <div id=\"score-display\">0</div>\n        \n        <div id=\"start-screen\" class=\"overlay\">\n            <h1>Flappy Google</h1>\n            <p>Click, tap, or press Space to start</p>\n            <p>Avoid the pipes!</p>\n            <div class=\"cheat-toggle-container\">\n                <label>Cheat Mode (Press 'C')</label>\n                <div class=\"cheat-toggle\">\n                    <div class=\"cheat-toggle-knob\"></div>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"game-over-screen\" class=\"overlay\" style=\"display: none;\">\n            <h1>Game Over</h1>\n            <p>Score: <span id=\"final-score\">0</span></p>\n            <p>High Score: <span id=\"high-score\">0</span></p>\n            <p id=\"cheat-message\" style=\"display: none; font-size: 14px; color: #FBBC05; text-shadow: none; margin-top: 5px;\">High score saving is disabled in cheat mode.</p>\n            <button id=\"restart-button\">Restart</button>\n            <div class=\"cheat-toggle-container\">\n                <label>Cheat Mode (Press 'C')</label>\n                <div class=\"cheat-toggle\">\n                    <div class=\"cheat-toggle-knob\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- DOM Elements ---\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            const scoreDisplay = document.getElementById('score-display');\n            const startScreen = document.getElementById('start-screen');\n            const gameOverScreen = document.getElementById('game-over-screen');\n            const finalScoreEl = document.getElementById('final-score');\n            const highScoreEl = document.getElementById('high-score');\n            const restartButton = document.getElementById('restart-button');\n            const cheatToggles = document.querySelectorAll('.cheat-toggle');\n            const cheatMessage = document.getElementById('cheat-message');\n\n            // --- Game Constants ---\n            const CANVAS_WIDTH = canvas.width;\n            const CANVAS_HEIGHT = canvas.height;\n\n            // --- Game State ---\n            let gameState = 'READY'; // READY, PLAYING, GAME_OVER\n            let score = 0;\n            let highScore = 0;\n            let frames = 0;\n            let cheatModeActive = false;\n\n            // --- Google Logo SVG ---\n            const GOOGLE_LOGO_SVG = `\n                <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n                </svg>`;\n            const birdImage = new Image();\n            birdImage.src = 'data:image/svg+xml;base64,' + btoa(GOOGLE_LOGO_SVG);\n\n            // --- Bird Object ---\n            const bird = {\n                x: 60,\n                y: CANVAS_HEIGHT / 2,\n                width: 45,\n                height: 45,\n                gravity: 0.25,\n                lift: -6.5,\n                velocity: 0,\n\n                draw: function() {\n                    ctx.save();\n                    // Add a glow effect if cheat mode is active\n                    if (cheatModeActive) {\n                        ctx.shadowColor = '#FBBC05'; // Google Yellow\n                        ctx.shadowBlur = 20;\n                    }\n                    ctx.translate(this.x + this.width / 2, this.y + this.height / 2);\n                    const rotation = Math.min(Math.max(-0.5, this.velocity / 15), 0.9);\n                    ctx.rotate(rotation);\n                    ctx.drawImage(birdImage, -this.width / 2, -this.height / 2, this.width, this.height);\n                    ctx.restore();\n                },\n\n                update: function() {\n                    this.velocity += this.gravity;\n                    this.y += this.velocity;\n\n                    // Prevent bird from going off the top of the screen\n                    if (this.y < 0) {\n                        this.y = 0;\n                        this.velocity = 0;\n                    }\n                },\n\n                flap: function() {\n                    this.velocity = this.lift;\n                },\n\n                reset: function() {\n                    this.y = CANVAS_HEIGHT / 2;\n                    this.velocity = 0;\n                }\n            };\n\n            // --- Pipes Object ---\n            const pipes = {\n                array: [],\n                width: 70,\n                gap: 200,\n                speed: 2,\n                spawnInterval: 120,\n\n                draw: function() {\n                    this.array.forEach(pipe => {\n                        ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-color').trim();\n                        ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--pipe-border-color').trim();\n                        ctx.lineWidth = 4;\n\n                        // Top pipe\n                        ctx.fillRect(pipe.x, 0, this.width, pipe.y);\n                        ctx.strokeRect(pipe.x, 0, this.width, pipe.y);\n\n                        // Bottom pipe\n                        const bottomPipeY = pipe.y + this.gap;\n                        const bottomPipeHeight = CANVAS_HEIGHT - bottomPipeY;\n                        ctx.fillRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                        ctx.strokeRect(pipe.x, bottomPipeY, this.width, bottomPipeHeight);\n                    });\n                },\n\n                update: function() {\n                    // Spawn new pipes\n                    if (frames % this.spawnInterval === 0) {\n                        const minHeight = 80;\n                        const maxHeight = CANVAS_HEIGHT - this.gap - minHeight;\n                        const randomY = Math.floor(Math.random() * (maxHeight - minHeight + 1) + minHeight);\n                        this.array.push({ x: CANVAS_WIDTH, y: randomY, passed: false });\n                    }\n\n                    // Move and manage pipes\n                    this.array.forEach(pipe => {\n                        pipe.x -= this.speed;\n\n                        // Check for score\n                        if (!pipe.passed && pipe.x + this.width < bird.x) {\n                            pipe.passed = true;\n                            score++;\n                            updateScoreDisplay();\n                        }\n                    });\n\n                    // Remove off-screen pipes\n                    this.array = this.array.filter(pipe => pipe.x + this.width > 0);\n                },\n\n                reset: function() {\n                    this.array = [];\n                }\n            };\n\n            // --- Collision Detection ---\n            function checkCollisions() {\n                // If cheat mode is on, we are invincible\n                if (cheatModeActive) {\n                    return false;\n                }\n\n                // Ground collision\n                if (bird.y + bird.height >= CANVAS_HEIGHT) {\n                    return true;\n                }\n                \n                // Pipe collision\n                for (let i = 0; i < pipes.array.length; i++) {\n                    const p = pipes.array[i];\n                    if (\n                        bird.x < p.x + pipes.width &&\n                        bird.x + bird.width > p.x &&\n                        (bird.y < p.y || bird.y + bird.height > p.y + pipes.gap)\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            // --- UI and State Management ---\n            function updateScoreDisplay() {\n                scoreDisplay.textContent = score;\n            }\n\n            function loadHighScore() {\n                const storedHighScore = localStorage.getItem('flappyGoogleHighScore');\n                highScore = storedHighScore ? parseInt(storedHighScore, 10) : 0;\n            }\n\n            function saveHighScore() {\n                if (cheatModeActive) return; // Do not save high score if cheat is active\n\n                if (score > highScore) {\n                    highScore = score;\n                    localStorage.setItem('flappyGoogleHighScore', highScore);\n                }\n            }\n\n            function handleInput() {\n                switch (gameState) {\n                    case 'READY':\n                        startGame();\n                        break;\n                    case 'PLAYING':\n                        bird.flap();\n                        break;\n                }\n            }\n            \n            function startGame() {\n                gameState = 'PLAYING';\n                startScreen.style.display = 'none';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                bird.flap();\n            }\n\n            function triggerGameOver() {\n                if (gameState === 'GAME_OVER') return;\n                gameState = 'GAME_OVER';\n                saveHighScore();\n                finalScoreEl.textContent = score;\n                highScoreEl.textContent = highScore;\n                \n                // Show cheat message if active\n                cheatMessage.style.display = cheatModeActive ? 'block' : 'none';\n\n                gameOverScreen.style.display = 'flex';\n                scoreDisplay.style.display = 'none';\n            }\n\n            function resetGame() {\n                bird.reset();\n                pipes.reset();\n                score = 0;\n                frames = 0;\n                updateScoreDisplay();\n                gameState = 'READY';\n                startScreen.style.display = 'flex';\n                gameOverScreen.style.display = 'none';\n                scoreDisplay.style.display = 'block';\n                scoreDisplay.textContent = '0';\n                cheatMessage.style.display = 'none';\n            }\n\n            function toggleCheatMode() {\n                cheatModeActive = !cheatModeActive;\n                cheatToggles.forEach(toggle => {\n                    toggle.classList.toggle('active', cheatModeActive);\n                });\n            }\n            \n            // --- Game Loop ---\n            function update() {\n                if (gameState !== 'PLAYING') return;\n                \n                bird.update();\n                pipes.update();\n                \n                if (checkCollisions()) {\n                    triggerGameOver();\n                }\n\n                frames++;\n            }\n\n            function draw() {\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                pipes.draw();\n                bird.draw();\n            }\n\n            function gameLoop() {\n                update();\n                draw();\n                requestAnimationFrame(gameLoop);\n            }\n\n            // --- Event Listeners ---\n            document.addEventListener('keydown', (e) => {\n                if (e.code === 'Space') {\n                    handleInput();\n                }\n                // Toggle cheat mode with 'c' key\n                if (e.key.toLowerCase() === 'c') {\n                    toggleCheatMode();\n                }\n            });\n            document.addEventListener('mousedown', handleInput);\n            document.addEventListener('touchstart', handleInput);\n            restartButton.addEventListener('click', (e) => {\n                e.stopPropagation(); // Prevent the click from triggering a flap\n                resetGame();\n            });\n            cheatToggles.forEach(toggle => {\n                toggle.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    toggleCheatMode();\n                });\n            });\n\n            // --- Initialization ---\n            function init() {\n                loadHighScore();\n                resetGame();\n                gameLoop();\n            }\n\n            init();\n        });\n    </script>\n\n</body>\n</html>"
  }
]